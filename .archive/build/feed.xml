<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/blog</id>
  <link href="http://blog.url.com/blog"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2020-02-25T09:44:00+01:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>Xcode: Generating app icons during build time</title>
    <link rel="alternate" href="http://blog.url.com/blog/2020/02/25/xcode-generating-app-icons-during-build-time.html"/>
    <id>http://blog.url.com/blog/2020/02/25/xcode-generating-app-icons-during-build-time.html</id>
    <published>2020-02-25T09:44:00+01:00</published>
    <updated>2020-09-20T16:43:33+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;When working in a corporate environment, you will easily find yourself building several variances of the same app, targeting different configurations (debug, beta, release), different environments (staging, production) and different versions.&lt;/p&gt;

&lt;p&gt;It can be messy if there is no clear way to differentiate them at a glance, i.e. with the app icon, and can potentially lead to situations where testers insert test data into production or try &lt;em&gt;to QA&lt;/em&gt; a feature in the wrong app version.&lt;/p&gt;

&lt;p&gt;Our first approach at &lt;a href="https://www.cluno.com/en/career/"&gt;Cluno&lt;/a&gt; was to generate different icons for different versions and include all of them in the assets catalogue. This methods works straightforward but has two problems. First of all, it is not very flexible. The icons needs to be designed, attached to the project, and mapped to each configuration:&lt;/p&gt;

&lt;p&gt;&lt;img src="/blog/2020-02-25/configurations.png" alt="" /&gt;
&lt;em&gt;App Icons in Build Settings section&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You have to ship you app with more icons than it should, increasing as well the binary size.&lt;/p&gt;

&lt;p&gt;The second problem is that you lose the capability to include in the icons dynamic information such as version, build number, commit hash, etc.&lt;/p&gt;

&lt;h2&gt;Generating iOS app icons with ImageMagick&lt;/h2&gt;

&lt;p&gt;There are several &lt;a href="https://accounts.raywenderlich.com/v2/sso/login?sso=bm9uY2U9NmJiOThjNmJjZDM0MGM5ZWY1OTI4MzA0OTcyZmJhZGImY2FsbGJh%0AY2tfdXJsPWh0dHBzJTNBJTJGJTJGd3d3LnJheXdlbmRlcmxpY2guY29tJTJG%0Ac2Vzc2lvbnMlMkZjcmVhdGU%3D%0A&amp;amp;sig=e60c2ec60c73daf0ca4ffe80cc01422de9f9ea9ecae9f2154909e7adb872b9b9&amp;amp;mode=login"&gt;tutorials&lt;/a&gt;, on how to &lt;a href="http://merowing.info/2013/03/overlaying-application-version-on-top-of-your-icon/"&gt;generate the app icon&lt;/a&gt; using &lt;a href="https://imagemagick.org/index.php"&gt;ImageMagick&lt;/a&gt;, running a script in a build phase and replacing it in the app package.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;As of iOS 11 that method doesn’t work anymore&lt;/strong&gt;. Apparently Xcode creates a copy of the app icon in a separate private file and that’s the one being used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;A new approach&lt;/h3&gt;

&lt;p&gt;Digging into Stackoverflow I found several people facing the same issue until &lt;a href="https://stackoverflow.com/questions/46114034/ios11-appicon-cant-change/49528873#49528873"&gt;this answer&lt;/a&gt; pointed us in the right direction: accessing directly the icon in the asset catalogue, performing the needed modifications before copying the bundle resources and reverting all the modifications at the very end, in order to leave the project in a clean state (with an unmodified app icon).&lt;/p&gt;

&lt;h3&gt;Show me the code!&lt;/h3&gt;

&lt;p&gt;In our project folder we created two scripts that are called during the build phases:&lt;/p&gt;

&lt;p&gt;&lt;img src="/blog/2020-02-25/phases.png" alt="" /&gt;
&lt;em&gt;Build phases&lt;/em&gt;&lt;/p&gt;

&lt;h4&gt;Icon generation script:&lt;/h4&gt;

&lt;pre&gt;&lt;code class="bash"&gt;#!/bin/bash

#
# Helpers
#
function installImageMagick() {
    brew install imagemagick ghostscript
}

#
# Preflight: Check if tools are installed
#

if hash identify 2&amp;gt;/dev/null &amp;amp;&amp;amp; hash convert 2&amp;gt;/dev/null; then
    echo &amp;quot;----------------------------------    &amp;quot;
    echo &amp;quot;ImageMagick already installed ✅     &amp;quot;
    echo &amp;quot;----------------------------------    &amp;quot;
else
    echo &amp;quot;-------------------------------   &amp;quot;
    echo &amp;quot;ImageMagick is not installed💥  &amp;quot;
    echo &amp;quot;-------------------------------   &amp;quot;

    installImageMagick
fi

#
# Access AppIcon
#
IFS=$&amp;#39;\n&amp;#39;
BASE_ICONS_DIR=$(find ${SRCROOT}/${PRODUCT_NAME} -name &amp;quot;AppIcon.appiconset&amp;quot;)
IFS=$&amp;#39; &amp;#39;
CONTENTS_JSON=&amp;quot;${BASE_ICONS_DIR}/Contents.json&amp;quot;

#
# Read configuration, version and build number
#
staging_configurations=(&amp;quot;Debug&amp;quot;, &amp;quot;DebugStaging&amp;quot;, &amp;quot;AlphaStaging&amp;quot;, &amp;quot;BetaStaging&amp;quot;, &amp;quot;Release&amp;quot;, &amp;quot;ReleaseStaging&amp;quot;)
production_configurations=(&amp;quot;DebugProduction&amp;quot;, &amp;quot;AlphaProduction&amp;quot;, &amp;quot;BetaProduction&amp;quot;, &amp;quot;ReleaseProduction&amp;quot;)

version=&amp;quot;${MARKETING_VERSION}&amp;quot;
buildNumber=`/usr/libexec/PlistBuddy -c &amp;quot;Print CFBundleVersion&amp;quot; &amp;quot;${INFOPLIST_FILE}&amp;quot;`

if [ &amp;quot;${CONFIGURATION}&amp;quot; == &amp;quot;Debug&amp;quot; ]; then
    caption=&amp;quot;DebugStaging\n${version}\n($buildNumber)&amp;quot;
elif [ &amp;quot;${CONFIGURATION}&amp;quot; == &amp;quot;Release&amp;quot; ]; then
    caption=&amp;quot;AlphaStaging\n${version}\n($buildNumber)&amp;quot;
else
    caption=&amp;quot;${CONFIGURATION}\n${version}\n($buildNumber)&amp;quot;
fi

echo $caption

#
# Generate icons
#
function generateIcons() {
ICON_PATH=$1

width=`identify -format %w ${ICON_PATH}`
[ $? -eq 0 ] || exit 1

height=$((width * 30 / 100))

if [ &amp;quot;${CONFIGURATION}&amp;quot; != &amp;quot;ReleaseProduction&amp;quot; ]; then

width=`identify -format %w ${ICON_PATH}`
height=`identify -format %h ${ICON_PATH}`
band_height=$((($height * 50) / 100))
band_position=$(($height - $band_height))
text_position=$(($band_position - 1))
point_size=$(((14 * $width) / 100))

#
# Band color
#
band_color=&amp;#39;rgba(0,0,0,0.8)&amp;#39;

if [[ &amp;quot; ${production_configurations[@]} &amp;quot; =~ &amp;quot;${CONFIGURATION}&amp;quot; ]] &amp;amp;&amp;amp; [[ &amp;quot;${CONFIGURATION}&amp;quot; != &amp;quot;Debug&amp;quot; ]] &amp;amp;&amp;amp; [[ &amp;quot;${CONFIGURATION}&amp;quot; != &amp;quot;Release&amp;quot; ]]; then
    band_color=&amp;#39;rgba(224,40,40,0.8)&amp;#39;
fi

#
# Blur band and text
#
convert ${ICON_PATH} -blur 10x8 /tmp/blurred.png
convert /tmp/blurred.png -gamma 0 -fill white -draw &amp;quot;rectangle 0,$band_position,$width,$height&amp;quot; /tmp/mask.png
convert -size ${width}x${band_height} xc:none -fill $band_color -draw &amp;quot;rectangle 0,0,$width,$band_height&amp;quot; /tmp/labels-base.png
convert -background none -size ${width}x${band_height} -pointsize $point_size -fill white -gravity center -gravity South -font ArialNarrowB caption:&amp;quot;$caption&amp;quot; /tmp/labels.png

convert ${ICON_PATH} /tmp/blurred.png /tmp/mask.png -composite /tmp/temp.png

rm /tmp/blurred.png
rm /tmp/mask.png

#
# Compose final image
#
convert /tmp/temp.png /tmp/labels-base.png -geometry +0+$band_position -composite /tmp/labels.png -geometry +0+$text_position -geometry +${w}-${h} -composite &amp;quot;${ICON_PATH}&amp;quot;

#
# Clean up
#
rm /tmp/temp.png
rm /tmp/labels-base.png
rm /tmp/labels.png
fi
}

ICONS=(`grep &amp;#39;filename&amp;#39; &amp;quot;${CONTENTS_JSON}&amp;quot; | cut -f2 -d: | tr -d &amp;#39;,&amp;#39; | tr -d &amp;#39;\n&amp;#39; | tr -d &amp;#39;&amp;quot;&amp;#39;`)

ICONS_COUNT=${#ICONS[*]}

IFS=$&amp;#39;\n&amp;#39;

for (( i=0; i&amp;lt;ICONS_COUNT; i++ )); do
generateIcons &amp;quot;$BASE_ICONS_DIR/${ICONS[$i]}&amp;quot;
done

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This script has to be called before the Copy Bundle Resources step. It can be pasted directly or called in the following way:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;&amp;quot;${SRCROOT}/Scripts/IconVersioning.sh&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It embeds configuration, version and build number information to the icon. The band is tinted red in the case of production configurations, to make the tester aware of being in a production environment.&lt;/p&gt;

&lt;p&gt;The second script needs to be placed as last step during the build phases and is responsible for reverting the changes, checking out the unmodified version of the icon:&lt;/p&gt;

&lt;h4&gt;Revert script:&lt;/h4&gt;

&lt;pre&gt;&lt;code class="bash"&gt;if [ &amp;quot;${CONFIGURATION}&amp;quot; != &amp;quot;ReleaseProduction&amp;quot; ]; then
IFS=$&amp;#39;\n&amp;#39;
git checkout -- `find &amp;quot;${SRCROOT}/${PRODUCT_NAME}&amp;quot; -name AppIcon.appiconset -type d`
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;… and then the final result 🎉&lt;/h3&gt;

&lt;p&gt;&lt;img src="/blog/2020-02-25/icons.png" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;Now is super convenient to work with different configurations, knowing that the icons are going to be up to date 😎.&lt;/p&gt;

&lt;p&gt;I set up a test project with the basic implementation: &lt;a href="https://github.com/gmoraleda/Xcode-Dynamic-Icon-Generation"&gt;https://github.com/gmoraleda/Xcode-Dynamic-Icon-Generation&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>🌳 Branching Model for iOS development. Continuous Integration with Bitrise</title>
    <link rel="alternate" href="http://blog.url.com/blog/2020/01/30/branching-model.html"/>
    <id>http://blog.url.com/blog/2020/01/30/branching-model.html</id>
    <published>2020-01-30T21:35:00+01:00</published>
    <updated>2020-09-20T16:43:33+02:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;When I started working at my current company, the setup we had for our iOS platform was hosted completely locally: &lt;strong&gt;Bitbucket Server&lt;/strong&gt; for the repo, &lt;strong&gt;Jenkins&lt;/strong&gt; as build platform and an own implementation of &lt;strong&gt;Hockeyapp&lt;/strong&gt; for the distribution (as far as I understood, from the old days when Hockeyapp was an open source project). All that was run by an external agency (the one who had developed our app).&lt;/p&gt;

&lt;p&gt;One of the first tasks I was assigned to was the internalisation of such services in order to become independent and take control of the development cycle.&lt;/p&gt;

&lt;p&gt;For hosting the repository we would use &lt;strong&gt;Bitbucket Cloud&lt;/strong&gt; and &lt;strong&gt;Hockeyapp&lt;/strong&gt; for distribution, but since our company does not host any server at all (our infrastructure runs mostly under the AWS umbrella), taking over the Jenkins implementation as it was, was not an option. &lt;strong&gt;I was in the market for a new cloud CI/CD platform.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://medium.com/xcblog/olympics-of-top-5-cloud-ios-continuous-integration-servers-fcaa6c79468d"&gt;The Olympics of iOS cloud continuous integration servers&lt;/a&gt; was a great starting point. Since we are not developing an iOS only app, buddybuild was not considered. After some research, the two finalists were &lt;strong&gt;CircleCI&lt;/strong&gt; and &lt;strong&gt;Bitrise&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;Initial Steps&lt;/h2&gt;

&lt;p&gt;My initial choice was CircleCI but even I was following a couple of &lt;a href="https://medium.com/sixt-labs-techblog/continuous-integration-and-delivery-at-sixt-91ca215670a0"&gt;tutorials&lt;/a&gt; I didn&amp;rsquo;t manage to get the signing working. It may offer more customisation than Bitrise but for &lt;strong&gt;someone who has no idea what&amp;rsquo;s he doing, having a building blocks interface as Bitrise does is key in such an early stage&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The customer service responded promptly to my questions as well, yet another reason to move to Bitrise.&lt;/p&gt;

&lt;p&gt;&lt;img src="/blog/2020-01-30/bitrise.png" title="All the steps included in one of our workflows… pretty self-explanatory" alt="" /&gt;
&lt;em&gt;All the steps included in one of our workflows… pretty self-explanatory&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;After linking all the steps (using basically the recommended templates from Bitrise) the building platform was working… sorta.&lt;/p&gt;

&lt;h2&gt;Limitations&lt;/h2&gt;

&lt;p&gt;We had three main workflows: Staging, Release Candidate and Distribution.&lt;/p&gt;

&lt;p&gt;Staging and Release Candidate would build from our &lt;code&gt;develop&lt;/code&gt; branch while Distribution would build from &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you are a single developer this setup works ok… but as the team grows, so does the need for more flexibility.&lt;/p&gt;

&lt;p&gt;What if I want to build a release candidate and someone else modifies the &lt;code&gt;develop&lt;/code&gt; branch? What if I want to ship a version to the QA department but I want to continue the development (and therefore merging branches into &lt;code&gt;develop&lt;/code&gt;)? &lt;strong&gt;Having a single branch in these scenarios is bad&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;New branching model to the rescue&lt;/h2&gt;

&lt;p&gt;At that point it was quite clear that we were in need of more flexibility. We added two extra branches to our setup: &lt;code&gt;beta&lt;/code&gt; and &lt;code&gt;release&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;develop&lt;/code&gt; would continue to reflect the current development state, generating new &lt;strong&gt;alpha versions&lt;/strong&gt; every time a new branch would be merged into &lt;code&gt;develop&lt;/code&gt;. As soon as the product manager required a new version to test a bunch of tickets together, we would manually merge from &lt;code&gt;develop&lt;/code&gt; into beta, creating a new &lt;strong&gt;beta version&lt;/strong&gt; app.&lt;/p&gt;

&lt;p&gt;&lt;img src="/blog/2020-01-30/new-scenario.jpeg" title="Creating a new beta version at a given point" alt="" /&gt;
&lt;em&gt;Creating a new beta version at a given point&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;That same approach would apply when several major features would be ready to integrate together in a more mature state, triggering a &lt;strong&gt;release candidate version&lt;/strong&gt;. A manual merge would be executed from &lt;code&gt;beta&lt;/code&gt; into &lt;code&gt;release&lt;/code&gt;, producing a new release candidate version app.&lt;/p&gt;

&lt;p&gt;&lt;img src="/blog/2020-01-30/beta-release.gif" title="Different beta versions, manual merge into a new release candidate" alt="" /&gt;
&lt;em&gt;Different beta versions, manual merge into a new release candidate&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This release candidate would the one potentially being shipped to iTunes Connect&lt;/strong&gt;. In case the final testing and the review process would be satisfactory, the app would be published and a manual merge from release into &lt;code&gt;master&lt;/code&gt; would be made, &lt;strong&gt;including a tag with the version number. The&lt;/strong&gt; &lt;code&gt;master&lt;/code&gt; &lt;strong&gt;branch would ideally contain all the app versions published in the AppStore, properly tagged.&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class="bash"&gt;git checkout master
git tag v.1.2          # As an example
git push --tags
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src="/blog/2020-01-30/release-master.jpeg" title="Merging into `master` once the app is published, using a tag (v.1.2)" alt="" /&gt;
&lt;em&gt;Merging into &lt;code&gt;master&lt;/code&gt; once the app is published, using a tag (v.1.2)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;All different versions produce two .ipa files, one targeting our staging backend and the second one targeting our live services.&lt;/p&gt;

&lt;p&gt;In order to make it easier for us (and for our testers) to tell which version targets what, we assigned different app icons including the version name and the backend environment:&lt;/p&gt;

&lt;p&gt;&lt;img src="/blog/2020-01-30/app-versions.jpeg" alt="" /&gt;&lt;/p&gt;

&lt;p&gt;These apps are uploaded to HockeyApp, where our team of testers can see and download them.
And that&amp;rsquo;s our current setup. Thanks for reading! ✌️&lt;/p&gt;
</content>
  </entry>
</feed>
