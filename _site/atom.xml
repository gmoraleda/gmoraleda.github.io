<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>moraleda.info</title>
 <link href="http://moraleda.info/atom.xml" rel="self"/>
 <link href="http://moraleda.info/"/>
 <updated>2021-02-19T12:28:01+01:00</updated>
 <id>http://moraleda.info</id>
 <author>
   <name>Guillermo Moraleda</name>
   <email></email>
 </author>

 
 <entry>
   <title>iOS - Localizing strings in a project</title>
   <link href="http://moraleda.info/2021/02/19/localization/"/>
   <updated>2021-02-19T00:00:00+01:00</updated>
   <id>http://moraleda.info/2021/02/19/localization</id>
   <content type="html">&lt;p&gt;Localization is an often overlooked problem. We start a project, we know that we only have to support one language and we approach our string-handling based on that requirement. When the time comes to support a second language, the project grew so much that adapting to that second language causes pain and frustration.&lt;/p&gt;

&lt;h2 id=&quot;doing-it-right-from-the-beginning&quot;&gt;Doing it right from the beginning&lt;/h2&gt;
&lt;p&gt;iOS and Xcode support localized strings in a &lt;em&gt;rudimentary-but-pragmatic&lt;/em&gt; way: we can define a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Localizable.strings&lt;/code&gt; file, and localize that file in &lt;em&gt;n&lt;/em&gt; languages. For each language we will have a key-value file that will contain all our strings:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// German strings

&quot;ok_button_title&quot; = &quot;OK&quot;;
&quot;cancel_button_title&quot; = &quot;Abbrechen&quot;;

/*Main Screen*/
&quot;main_title&quot; = &quot;Willkommen&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// Spanish strings

&quot;ok_button_title&quot; = &quot;Vale&quot;;
&quot;cancel_button_title&quot; = &quot;Cancelar&quot;;

/*Main Screen*/
&quot;main_title&quot; = &quot;Bienvenido&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For accessing these strings all we need to do is to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSLocalizedString(key, comment: &quot;&quot;)&lt;/code&gt; and pass the key we are interested in. Eg. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSLocalizedString(&quot;ok_button_title&quot;, comment: &quot;&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is going to work nicely and, if we were to launch the app in German or Spanish, the system will know which strings to use.&lt;/p&gt;

&lt;h2 id=&quot;getting-they-keys-under-control&quot;&gt;Getting they keys under control&lt;/h2&gt;
&lt;p&gt;The main drawback of that approach is that keys are strings and if they start going around, that could be prone to error.&lt;/p&gt;

&lt;p&gt;This can be easily solved as well. Let’s define a new type called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Strings&lt;/code&gt; which will contain all our keys:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Strings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;okButtonTitle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ok_button_title&quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cancelButtonTitle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cancel_button_title&quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainTitle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;main_title&quot;&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mainSubtitle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;main_subtitle&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can even define an extension to get the localized string for every key in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Strings&lt;/code&gt; enum:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Strings&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;localized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;NSLocalizedString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rawValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now all we need to do to use a string in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UILabel&lt;/code&gt;, for example, is to call:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Strings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mainTitle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localized&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;bringing-it-to-the-next-level-extracting-the-strings&quot;&gt;Bringing it to the next level: extracting the strings&lt;/h2&gt;
&lt;p&gt;Keeping strings and wordings up to date is usually a burden for developers. 
Designers would produce a mockup which some wordings than then the product manager will need to check/update. The developer is usually left with the task of making sure that these wordings are in sync. If a project is run in several platforms (iOS, Android, web…), keeping the wordings up to date and synchronized can get out of control easily.&lt;/p&gt;

&lt;p&gt;A wiser approach would be to move these strings out of the project and place them in a centralized tool that every platform could access. 
You could build such a service or you can use a commercial solution.
For the sake of this tutorial I’m going to use &lt;a href=&quot;https://poeditor.com&quot;&gt;POEditor&lt;/a&gt;: an online tool which allows you define terms and their translations and provides an API to access that information.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-the-project&quot;&gt;Setting up the project&lt;/h3&gt;
&lt;p&gt;This step is very straight-forward: we create a project, we add new entries (called terms in POEditor) and provide the translations. That’s all it is.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
    &lt;img src=&quot;/assets/blog/poeditor.png&quot; alt=&quot;POEditor&quot; /&gt;
    &lt;figcaption&gt;POEditor&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;h3 id=&quot;automatizing-the-fetching-of-the-strings&quot;&gt;Automatizing the fetching of the strings&lt;/h3&gt;
&lt;p&gt;The underlying idea is that, on every build, we want to fetch the latest strings, generating our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Strings&lt;/code&gt; enum automatically (listing all available keys), and download the translations in the different supported languages.&lt;/p&gt;

&lt;p&gt;To do so I’m using Python, hacking my way into it (please, don’t judge my Python knowledge: I know nothing about nothing).&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/99e7157b78a400e29a6a0d17b178dc8a.js?file=localize.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;The script does two main things: first, it fetches all the terms listed in the project. With that we create our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Strings&lt;/code&gt; class (we are also taking care of the case conversion from snake to camel case).&lt;/p&gt;

&lt;p&gt;The second step is to download the files containing the translations.&lt;/p&gt;

&lt;p&gt;This script is run during the build phase:&lt;/p&gt;
&lt;figure class=&quot;image&quot;&gt;
    &lt;img src=&quot;/assets/blog/localize_build.png&quot; alt=&quot;Build Phases&quot; /&gt;
    &lt;figcaption&gt;Build Phases&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This can be easily improved, but with a couple of neat tricks we were able to create a setup where developers don’t really need to worry about strings anymore. A PM or marketing person could go into that tool and update these strings and the app will pick-up on the changes during the next build.&lt;/p&gt;

&lt;p&gt;The tool also supports other formats for the export file (JSON, Android XML, etc.), so this script could be easily adapted to your project/platform requirements.&lt;/p&gt;

&lt;p&gt;Thanks for reading! ✌️&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SwiftUI in the Apple Watch - Baby Colors</title>
   <link href="http://moraleda.info/2020/11/17/baby-watch/"/>
   <updated>2020-11-17T00:00:00+01:00</updated>
   <id>http://moraleda.info/2020/11/17/baby-watch</id>
   <content type="html">&lt;p&gt;My daughter Lola, as any other toddler I suppose, loves screens. She gets hypnotized by any square that throws light.
My wife and I have been pretty consequent about her exposure to screens: we don’t watch TV if she is around, we limit our own screen time, etc.
Yet there is one last screen my daughter is enjoying: my Apple Watch.&lt;/p&gt;

&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;

&lt;p&gt;I don’t want to remove it every time I go on my knees and start playing with her, but the moment that the watch detects a wrist movement and activates, Lola goes to it like bees to honey.&lt;/p&gt;

&lt;p&gt;I’m amazed by how fast she got the swiping gesture. She swipes through the menus with her tiny fingers, messing with various apps… it is fun but I’m also a bit concern that she is going to delete some important appointment or challenge my colleagues in the Workouts app. Don’t want them to be embarrassed 😜&lt;/p&gt;

&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;

&lt;p&gt;I thought about creating a playground for her. An App on itself where she could swipe. It’s coding time!&lt;/p&gt;

&lt;h2 id=&quot;the-implementation&quot;&gt;The implementation&lt;/h2&gt;

&lt;p&gt;I have zero experience with watchOS. The app I wanted to build would be some sort of TableView where each cell would have a background color and some emojis perhaps. Emojis are fun. I can do this fairly quickly with UIKit. What about the Apple Watch?&lt;/p&gt;

&lt;p&gt;Well, now you can build a standalone watchOS App using SwitfUI even faster. The App is 50 lines of code. Yes. Fifty. And is ridiculously easy to follow:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Identifiable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ListViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ObservableObject&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@Published&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ViewItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;intArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;repeating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;items&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ViewItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ViewItem&lt;/code&gt; which represent every cell in the TableView (a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt; in the SwifUI world). It needs to conform to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Identifiable&lt;/code&gt; and it basically holds one color. Just a random generated one.&lt;/p&gt;

&lt;p&gt;Then we have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ListViewModel&lt;/code&gt; which holds an array of items. I defined the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reload()&lt;/code&gt; function so that the array would be regenerated when any cell is touched.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-swift&quot; data-lang=&quot;swift&quot;&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;cellHeight&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;WKInterfaceDevice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;screenBounds&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;@State&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isEmojiVisible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;@ObservedObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ListViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;some&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;View&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;ForEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;ZStack&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;isEmojiVisible&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toggle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;edgesIgnoringSafeArea&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;kt&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmojiVisible&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;randomEmoji&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;font&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;listRowInsets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;EdgeInsets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaultMinListRowHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cellHeight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then we have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ContentView&lt;/code&gt; itself. It hosts the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;List&lt;/code&gt; where each item is represented by a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ZStack&lt;/code&gt; view which holds a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Button&lt;/code&gt; view and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text&lt;/code&gt; view holding the Emoji. That’s all it is.&lt;/p&gt;

&lt;p&gt;The button action toggles the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isEmojiVisible&lt;/code&gt; variable and reloads the ViewModel, generating new colors.&lt;/p&gt;

&lt;h2 id=&quot;the-final-result&quot;&gt;The final result&lt;/h2&gt;
&lt;figure class=&quot;image&quot;&gt;
    &lt;img src=&quot;/assets/blog/babycolors.gif&quot; alt=&quot;Final result&quot; /&gt;
    &lt;figcaption&gt;Final result&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;p&gt;I tested it with Lola and she seems to love it. And I loved how easy is to create something from scratch using SwiftUI.&lt;/p&gt;

&lt;p&gt;I’ve published the project on &lt;a href=&quot;https://github.com/gmoraleda/BabyColors&quot;&gt;GitHub&lt;/a&gt; for those who might be interested. Thanks for reading! ✌️&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>How to be a good developer</title>
   <link href="http://moraleda.info/2020/10/08/how-to-be-a-good-developer/"/>
   <updated>2020-10-08T00:00:00+02:00</updated>
   <id>http://moraleda.info/2020/10/08/how-to-be-a-good-developer</id>
   <content type="html">&lt;p&gt;You have decided that you want to become a developer. Good. There is a huge demand and salaries are high. But what does it take to succeed at this job?&lt;/p&gt;

&lt;h2 id=&quot;forget-about-coding-skills&quot;&gt;Forget about coding skills&lt;/h2&gt;
&lt;p&gt;During my first years as junior developer I had a tendency to idolize my more senior colleagues that were able to refactor my five lines of code into a single one using some language feature. To me that was a sign of seniority and I started focusing on that. There is nothing wrong there. One day you will find yourself being that developer that is able to synthesize several actions into a single &lt;em&gt;map&lt;/em&gt; call. But is that it?&lt;/p&gt;

&lt;p&gt;I’ve seen several developer with excellent coding skills that I wouldn’t consider &lt;em&gt;good&lt;/em&gt; developers. They can code in a &lt;em&gt;cool&lt;/em&gt; way. Sure. But being cool doesn’t make you better. Is just a sign that you have been writing code long enough so that you started micro-optimizing your time.&lt;/p&gt;

&lt;p&gt;So, if it’s not your coding skills, what is it then?&lt;/p&gt;

&lt;h2 id=&quot;its-all-about-the-team&quot;&gt;It’s all about the team&lt;/h2&gt;
&lt;p&gt;Don’t get me wrong. You &lt;em&gt;need&lt;/em&gt; your coding skills. You need them in the same way a football players needs to know how to kick the ball. But that alone won’t make any difference. Coding is, at most, 50% of the job.&lt;/p&gt;

&lt;p&gt;If you are working for a company chances are that the rest of the time you are going to be caught in meetings. Planing sprints, discussing requirements, grooming tickets or reviewing someone elses code. And let that last one sink for a second. Reviewing code.&lt;/p&gt;

&lt;p&gt;Maybe that surprises you, but a lot of your time is going to be spent reading code. And then you start thinking twice before naming a new function or deciding whether to use shorthand argument names while writing code. Because you should choose clarity over coolness. Readability over compactness.&lt;/p&gt;

&lt;h2 id=&quot;use-your-time-wisely&quot;&gt;Use your time wisely&lt;/h2&gt;
&lt;p&gt;Another thing I’ve experience multiple times is someone approaching a problem trying to provide a solution that will also solve future potential problems. Are these problems known? Is it a requirement? If the answer to both questions is no, maybe you should rethink your approach there.&lt;/p&gt;

&lt;p&gt;In my experience it is better to write less code. Because the lesser the code, the easier it is to delete and replace.&lt;/p&gt;

&lt;p&gt;We often whine about legacy code. Well, that last pull request that you just merged into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;… that one just became legacy code.&lt;/p&gt;

&lt;h2 id=&quot;say-no&quot;&gt;Say no&lt;/h2&gt;
&lt;p&gt;Push back. Say no. Don’t be shy. 
Is this new feature compliant with the rest of the app? Are the designs consistent? Can we use a native feature that will save us time compared to building everything ourselves?&lt;/p&gt;

&lt;p&gt;Your work will be product driven. And hopefully your product managers will know what are they doing. But that won’t always be the case. It is your job to guide them whenever is required. To know and &lt;del&gt;defend&lt;/del&gt; help your PM to better understand the constraints and possibilities of your platform&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. To say no whenever you think you should.&lt;/p&gt;

&lt;p&gt;Don’t be that developer pulling tickets from a backlog, processing them and putting them to &lt;em&gt;Done&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Care. Because your work is a reflection of yourself. Care. Because caring is indeed what will make a difference.&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
      &lt;p&gt;A change suggested by a good friend of mine. A PM himself 👮‍♂️ &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>🌳 Branching Model for iOS development. Continuous Integration with Bitrise</title>
   <link href="http://moraleda.info/2020/09/30/branching-model/"/>
   <updated>2020-09-30T00:00:00+02:00</updated>
   <id>http://moraleda.info/2020/09/30/branching-model</id>
   <content type="html">&lt;p&gt;When I started working at my current company, the setup we had for our iOS platform was hosted completely locally: &lt;strong&gt;Bitbucket Server&lt;/strong&gt; for the repo, &lt;strong&gt;Jenkins&lt;/strong&gt; as build platform and an own implementation of &lt;strong&gt;Hockeyapp&lt;/strong&gt; for the distribution (as far as I understood, from the old days when Hockeyapp was an open source project). All that was run by an external agency (the one who had developed our app).&lt;/p&gt;

&lt;p&gt;One of the first tasks I was assigned to was the internalisation of such services in order to become independent and take control of the development cycle.&lt;/p&gt;

&lt;p&gt;For hosting the repository we would use &lt;strong&gt;Bitbucket Cloud&lt;/strong&gt; and &lt;strong&gt;Hockeyapp&lt;/strong&gt; for distribution, but since our company does not host any server at all (our infrastructure runs mostly under the AWS umbrella), taking over the Jenkins implementation as it was, was not an option. &lt;strong&gt;I was in the market for a new cloud CI/CD platform.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/xcblog/olympics-of-top-5-cloud-ios-continuous-integration-servers-fcaa6c79468d&quot;&gt;The Olympics of iOS cloud continuous integration servers&lt;/a&gt; was a great starting point. Since we are not developing an iOS only app, buddybuild was not considered. After some research, the two finalists were &lt;strong&gt;CircleCI&lt;/strong&gt; and &lt;strong&gt;Bitrise&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;initial-steps&quot;&gt;Initial Steps&lt;/h2&gt;

&lt;p&gt;My initial choice was CircleCI but even I was following a couple of &lt;a href=&quot;https://medium.com/sixt-labs-techblog/continuous-integration-and-delivery-at-sixt-91ca215670a0&quot;&gt;tutorials&lt;/a&gt; I didn’t manage to get the signing working. It may offer more customisation than Bitrise but for &lt;strong&gt;someone who has no idea what’s he doing, having a building blocks interface as Bitrise does is key in such an early stage&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The customer service responded promptly to my questions as well, yet another reason to move to Bitrise.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
    &lt;img src=&quot;/assets/blog/bitrise.png&quot; alt=&quot;All the steps included in one of our workflows… pretty self-explanatory&quot; /&gt;
    &lt;figcaption&gt;All the steps included in one of our workflows… pretty self-explanatory&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;p&gt;After linking all the steps (using basically the recommended templates from Bitrise) the building platform was working… sorta.&lt;/p&gt;

&lt;h2 id=&quot;limitations&quot;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;We had three main workflows: Staging, Release Candidate and Distribution.&lt;/p&gt;

&lt;p&gt;Staging and Release Candidate would build from our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt; branch while Distribution would build from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you are a single developer this setup works ok… but as the team grows, so does the need for more flexibility.&lt;/p&gt;

&lt;p&gt;What if I want to build a release candidate and someone else modifies the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt; branch? What if I want to ship a version to the QA department but I want to continue the development (and therefore merging branches into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt;)? &lt;strong&gt;Having a single branch in these scenarios is bad&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;new-branching-model-to-therescue&quot;&gt;New branching model to the rescue&lt;/h2&gt;

&lt;p&gt;At that point it was quite clear that we were in need of more flexibility. We added two extra branches to our setup: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;beta&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;release&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt; would continue to reflect the current development state, generating new &lt;strong&gt;alpha versions&lt;/strong&gt; every time a new branch would be merged into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt;. As soon as the product manager required a new version to test a bunch of tickets together, we would manually merge from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;develop&lt;/code&gt; into beta, creating a new &lt;strong&gt;beta version&lt;/strong&gt; app.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
    &lt;img src=&quot;/assets/blog/new-scenario.jpeg&quot; alt=&quot;Creating a new beta version at a given point&quot; /&gt;
    &lt;figcaption&gt;Creating a new beta version at a given point&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;p&gt;That same approach would apply when several major features would be ready to integrate together in a more mature state, triggering a &lt;strong&gt;release candidate version&lt;/strong&gt;. A manual merge would be executed from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;beta&lt;/code&gt; into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;release&lt;/code&gt;, producing a new release candidate version app.&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
    &lt;img src=&quot;/assets/blog/beta-release.gif&quot; alt=&quot;Different beta versions, manual merge into a new release candidate&quot; /&gt;
    &lt;figcaption&gt;Different beta versions, manual merge into a new release candidate&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;This release candidate would the one potentially being shipped to iTunes Connect&lt;/strong&gt;. In case the final testing and the review process would be satisfactory, the app would be published and a manual merge from release into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; would be made, &lt;strong&gt;including a tag with the version number. The&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;master&lt;/code&gt; &lt;strong&gt;branch would ideally contain all the app versions published in the AppStore, properly tagged.&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout master
git tag v.1.2          &lt;span class=&quot;c&quot;&gt;# As an example&lt;/span&gt;
git push &lt;span class=&quot;nt&quot;&gt;--tags&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;image&quot;&gt;
    &lt;img src=&quot;/assets/blog/release-master.jpeg&quot; alt=&quot;Merging into `master` once the app is published, using a tag (v.1.2)&quot; /&gt;
    &lt;figcaption&gt;Merging into `master` once the app is published, using a tag (v.1.2)&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;p&gt;All different versions produce two .ipa files, one targeting our staging backend and the second one targeting our live services.&lt;/p&gt;

&lt;p&gt;In order to make it easier for us (and for our testers) to tell which version targets what, we assigned different app icons including the version name and the backend environment:&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
    &lt;img src=&quot;/assets/blog/app-versions.jpeg&quot; alt=&quot;&quot; /&gt;
    &lt;figcaption&gt;&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;p&gt;These apps are uploaded to HockeyApp, where our team of testers can see and download them.
And that’s our current setup. Thanks for reading! ✌️&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Dynamic App icon generation with Xcode</title>
   <link href="http://moraleda.info/2020/09/25/xcode-dynamic-icons/"/>
   <updated>2020-09-25T00:00:00+02:00</updated>
   <id>http://moraleda.info/2020/09/25/xcode-dynamic-icons</id>
   <content type="html">&lt;p&gt;When working in a corporate environment, you will easily find yourself building several variances of the same app, targeting different configurations (debug, beta, release), different environments (staging, production) and different versions.&lt;/p&gt;

&lt;p&gt;It can be messy if there is no clear way to differentiate them at a glance, i.e. with the app icon, and can potentially lead to situations where testers insert test data into production or try &lt;em&gt;to QA&lt;/em&gt; a feature in the wrong app version.&lt;/p&gt;

&lt;p&gt;Our first approach at &lt;a href=&quot;https://www.cluno.com/en/career/&quot;&gt;Cluno&lt;/a&gt; was to generate different icons for different versions and include all of them in the assets catalogue. This methods works straightforward but has two problems. First of all, it is not very flexible. The icons needs to be designed, attached to the project, and mapped to each configuration:&lt;/p&gt;

&lt;figure class=&quot;image&quot;&gt;
    &lt;img src=&quot;/assets/blog/configurations.png&quot; alt=&quot;App Icons in Build Settings section&quot; /&gt;
    &lt;figcaption&gt;App Icons in Build Settings section&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;p&gt;You have to ship you app with more icons than it should, increasing as well the binary size.&lt;/p&gt;

&lt;p&gt;The second problem is that you lose the capability to include in the icons dynamic information such as version, build number, commit hash, etc.&lt;/p&gt;

&lt;h2 id=&quot;generating-ios-app-icons-with-imagemagick&quot;&gt;Generating iOS app icons with ImageMagick&lt;/h2&gt;

&lt;p&gt;There are several &lt;a href=&quot;https://accounts.raywenderlich.com/v2/sso/login?sso=bm9uY2U9NmJiOThjNmJjZDM0MGM5ZWY1OTI4MzA0OTcyZmJhZGImY2FsbGJh%0AY2tfdXJsPWh0dHBzJTNBJTJGJTJGd3d3LnJheXdlbmRlcmxpY2guY29tJTJG%0Ac2Vzc2lvbnMlMkZjcmVhdGU%3D%0A&amp;amp;sig=e60c2ec60c73daf0ca4ffe80cc01422de9f9ea9ecae9f2154909e7adb872b9b9&amp;amp;mode=login&quot;&gt;tutorials&lt;/a&gt;, on how to &lt;a href=&quot;http://merowing.info/2013/03/overlaying-application-version-on-top-of-your-icon/&quot;&gt;generate the app icon&lt;/a&gt; using &lt;a href=&quot;https://imagemagick.org/index.php&quot;&gt;ImageMagick&lt;/a&gt;, running a script in a build phase and replacing it in the app package.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;As of iOS 11 that method doesn’t work anymore&lt;/strong&gt;. Apparently Xcode creates a copy of the app icon in a separate private file and that’s the one being used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;a-new-approach&quot;&gt;A new approach&lt;/h3&gt;

&lt;p&gt;Digging into Stackoverflow I found several people facing the same issue until &lt;a href=&quot;https://stackoverflow.com/questions/46114034/ios11-appicon-cant-change/49528873#49528873&quot;&gt;this answer&lt;/a&gt; pointed us in the right direction: accessing directly the icon in the asset catalogue, performing the needed modifications before copying the bundle resources and reverting all the modifications at the very end, in order to leave the project in a clean state (with an unmodified app icon).&lt;/p&gt;

&lt;h3 id=&quot;show-me-the-code&quot;&gt;Show me the code!&lt;/h3&gt;

&lt;p&gt;In our project folder we created two scripts that are called during the build phases:&lt;/p&gt;

&lt;h4 id=&quot;icon-generation-script&quot;&gt;Icon generation script:&lt;/h4&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/af51e85ff5cac49b92d68c7705feac1d.js?file=IconVersioning.sh&quot;&gt; &lt;/script&gt;

&lt;p&gt;This script has to be called before the Copy Bundle Resources step. It can be pasted directly or called in the following way:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;${SRCROOT}/Scripts/IconVersioning.sh&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It embeds configuration, version and build number information to the icon. The band is tinted red in the case of production configurations, to make the tester aware of being in a production environment.&lt;/p&gt;

&lt;p&gt;The second script needs to be placed as last step during the build phases and is responsible for reverting the changes, checking out the unmodified version of the icon:&lt;/p&gt;

&lt;h4 id=&quot;revert-script&quot;&gt;Revert script:&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONFIGURATION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ReleaseProduction&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IFS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;$'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;
git checkout &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;find &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SRCROOT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PRODUCT_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; AppIcon.appiconset &lt;span class=&quot;nt&quot;&gt;-type&lt;/span&gt; d&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;-and-then-the-final-result-&quot;&gt;… and then the final result 🎉&lt;/h3&gt;

&lt;figure class=&quot;image&quot;&gt;
    &lt;img src=&quot;/assets/blog/icons.png&quot; alt=&quot;Final result&quot; /&gt;
    &lt;figcaption&gt;Final result&lt;/figcaption&gt;
  &lt;/figure&gt;

&lt;p&gt;Now is super convenient to work with different configurations, knowing that the icons are going to be up to date 😎.&lt;/p&gt;

&lt;p&gt;I set up a test project with the basic implementation: &lt;a href=&quot;https://github.com/gmoraleda/Xcode-Dynamic-Icon-Generation&quot;&gt;https://github.com/gmoraleda/Xcode-Dynamic-Icon-Generation&lt;/a&gt;&lt;/p&gt;

</content>
 </entry>
 

</feed>
