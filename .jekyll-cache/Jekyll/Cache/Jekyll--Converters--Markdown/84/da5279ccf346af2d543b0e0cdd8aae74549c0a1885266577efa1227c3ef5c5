I"á!<p>My daughter Lola, as any other toddler I suppose, loves screens. She gets hypnotized by any square that throws light.
My wife and I have been pretty consequent about her exposure to screens: we don‚Äôt watch TV if she is around, we limit our own screen time, etc.
Yet there is one last screen my daughter is enjoying: my Apple Watch.</p>

<h2 id="the-problem">The problem</h2>

<p>I don‚Äôt want to remove it every time I go on my knees and start playing with her, but the moment that the watch detects a wrist movement and activates, Lola goes to it like bees to honey.</p>

<p>I‚Äôm amazed by how fast she got the swiping gesture. She swipes throw menus with her tiny fingers, messing with various apps‚Ä¶ it is fun but I‚Äôm also a bit concern that she is going to delete some important appointment or challenge my colleagues in the Workouts app. Don‚Äôt want them to be embarrassed üòú</p>

<h2 id="the-solution">The solution</h2>

<p>I thought about creating a playground for her. An App on itself where she could swipe. It‚Äôs coding time!</p>

<h2 id="the-implementation">The implementation</h2>

<p>I have zero experience with watchOS. The app I wanted to build would be some sort of TableView where each cell would have a background color and some emojis perhaps. Emojis are fun. I can do this fairly quick with UIKit. What about the Apple Watch?</p>

<p>Well, now you can build a standalone watchOS App using SwitfUI even faster. The App is 50 lines of code. Yes. Fifty. And is ridiculously easy to follow:</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">struct</span> <span class="kt">ViewItem</span><span class="p">:</span> <span class="kt">Identifiable</span> <span class="p">{</span>
    <span class="k">var</span> <span class="nv">id</span> <span class="o">=</span> <span class="kt">UUID</span><span class="p">()</span>
    <span class="k">var</span> <span class="nv">color</span> <span class="o">=</span> <span class="kt">Color</span><span class="o">.</span><span class="n">random</span>
<span class="p">}</span>

<span class="kd">class</span> <span class="kt">ListViewModel</span><span class="p">:</span> <span class="kt">ObservableObject</span> <span class="p">{</span>
    <span class="kd">@Published</span> <span class="k">var</span> <span class="nv">items</span> <span class="o">=</span> <span class="p">[</span><span class="kt">ViewItem</span><span class="p">]()</span>

    <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">reload</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="kd">func</span> <span class="nf">reload</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">let</span> <span class="nv">intArray</span> <span class="o">=</span> <span class="p">[</span><span class="kt">Int</span><span class="p">](</span><span class="nv">repeating</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span> <span class="nv">count</span><span class="p">:</span> <span class="mi">50</span><span class="p">)</span>
        <span class="n">items</span> <span class="o">=</span> <span class="n">intArray</span><span class="o">.</span><span class="n">map</span> <span class="p">{</span> <span class="n">_</span> <span class="k">in</span> <span class="kt">ViewItem</span><span class="p">()</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>We have a <code class="language-plaintext highlighter-rouge">ViewItem</code> which represent every cell in the TableView (a <code class="language-plaintext highlighter-rouge">List</code> in the SwifUI world). It needs to conform to <code class="language-plaintext highlighter-rouge">Identifiable</code> and it basically holds one color. Just a random generated one.</p>

<p>Then we hve a <code class="language-plaintext highlighter-rouge">ListViewModel</code> which holds an array of items. I created the <code class="language-plaintext highlighter-rouge">reload</code> function so that the array would be regenerated when any cell is touched.</p>

<figure class="highlight"><pre><code class="language-swift" data-lang="swift"><span class="kd">struct</span> <span class="kt">ContentView</span><span class="p">:</span> <span class="kt">View</span> <span class="p">{</span>
    <span class="k">let</span> <span class="nv">cellHeight</span> <span class="o">=</span> <span class="kt">WKInterfaceDevice</span><span class="o">.</span><span class="nf">current</span><span class="p">()</span><span class="o">.</span><span class="n">screenBounds</span><span class="o">.</span><span class="n">height</span> <span class="o">/</span> <span class="mi">2</span>
    
    <span class="kd">@State</span> <span class="k">var</span> <span class="nv">isEmojiVisible</span> <span class="o">=</span> <span class="kc">true</span>
    <span class="kd">@ObservedObject</span> <span class="k">var</span> <span class="nv">viewModel</span> <span class="o">=</span> <span class="kt">ListViewModel</span><span class="p">()</span>

    <span class="k">var</span> <span class="nv">body</span><span class="p">:</span> <span class="kd">some</span> <span class="kt">View</span> <span class="p">{</span>
        <span class="kt">List</span> <span class="p">{</span>
            <span class="kt">ForEach</span><span class="p">(</span><span class="n">viewModel</span><span class="o">.</span><span class="n">items</span><span class="p">)</span> <span class="p">{</span> <span class="n">item</span> <span class="k">in</span>
                <span class="kt">ZStack</span> <span class="p">{</span>
                    <span class="kt">Button</span><span class="p">(</span><span class="nv">action</span><span class="p">:</span> <span class="p">{</span>
                        <span class="n">viewModel</span><span class="o">.</span><span class="nf">reload</span><span class="p">()</span>
                        <span class="n">isEmojiVisible</span><span class="o">.</span><span class="nf">toggle</span><span class="p">()</span>
                    <span class="p">})</span> <span class="p">{</span>
                        <span class="n">item</span><span class="o">.</span><span class="n">color</span><span class="o">.</span><span class="nf">edgesIgnoringSafeArea</span><span class="p">(</span><span class="o">.</span><span class="n">all</span><span class="p">)</span>
                    <span class="p">}</span>
                    <span class="kt">Text</span><span class="p">(</span><span class="n">isEmojiVisible</span> <span class="p">?</span> <span class="kt">String</span><span class="o">.</span><span class="nv">randomEmoji</span> <span class="p">:</span> <span class="s">""</span><span class="p">)</span><span class="o">.</span><span class="nf">font</span><span class="p">(</span><span class="o">.</span><span class="n">title</span><span class="p">)</span>
                <span class="p">}</span><span class="o">.</span><span class="nf">listRowInsets</span><span class="p">(</span><span class="kt">EdgeInsets</span><span class="p">())</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="o">.</span><span class="nf">environment</span><span class="p">(\</span><span class="o">.</span><span class="n">defaultMinListRowHeight</span><span class="p">,</span> <span class="n">cellHeight</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>And then we have the <code class="language-plaintext highlighter-rouge">ContentView</code> itself. It hosts the <code class="language-plaintext highlighter-rouge">List</code> where each item is represented by a <code class="language-plaintext highlighter-rouge">ZStack</code> view which holds a <code class="language-plaintext highlighter-rouge">Button</code> view and a <code class="language-plaintext highlighter-rouge">Text</code> view holding the Emoji. That‚Äôs all it is.</p>

<p>The button action toggles the isEmojiVisible variable and reloads the ViewModel, generating new colors.</p>

<h2 id="the-final-result">The final result</h2>
<figure class="image">
    <img src="/assets/blog/babycolors.gif" alt="Final result" />
    <figcaption>Final result</figcaption>
  </figure>

<p>I tested it with Lola and she seems to love it. And I loved how easy is to create something from scratch using SwiftUI.</p>

<p>I publish the project on <a href="https://github.com/gmoraleda/BabyColors">GitHub</a> for those who might be interested. Thanks for reading! ‚úåÔ∏è</p>
:ET